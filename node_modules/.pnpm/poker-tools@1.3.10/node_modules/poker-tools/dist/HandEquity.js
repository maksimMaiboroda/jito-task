"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var HandEquity = function () {
  function HandEquity() {
    _classCallCheck(this, HandEquity);

    this.possibleHandsCount = 0;
    this.bestHandCount = 0;
    this.tieHandCount = 0;
  }

  _createClass(HandEquity, [{
    key: "addPossibility",
    value: function addPossibility(isBestHand, isTie) {
      this.possibleHandsCount++;
      if (isBestHand) {
        this.bestHandCount++;
      } else if (isTie) {
        this.tieHandCount++;
      }
    }
  }, {
    key: "getEquity",
    value: function getEquity() {
      if (this.possibleHandsCount === 0) {
        return 0;
      }
      return Math.round(this.bestHandCount * 100.0 / this.possibleHandsCount);
    }
  }, {
    key: "getTiePercentage",
    value: function getTiePercentage() {
      if (this.possibleHandsCount === 0) {
        return 0;
      }
      return Math.round(this.tieHandCount * 100.0 / this.possibleHandsCount);
    }
  }, {
    key: "toString",
    value: function toString() {
      var s = this.getEquity() + "%";
      var tie = this.getTiePercentage();
      if (tie > 0) {
        s += " (Tie: " + tie + "%)";
      }
      return s;
    }
  }]);

  return HandEquity;
}();

exports.default = HandEquity;