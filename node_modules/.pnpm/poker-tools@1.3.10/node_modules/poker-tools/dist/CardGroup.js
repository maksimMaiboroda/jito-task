"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

var _Card = require("./Card");

var _Card2 = _interopRequireDefault(_Card);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CardGroup = function () {
  function CardGroup(cards) {
    _classCallCheck(this, CardGroup);

    this.cards = cards;
  }

  _createClass(CardGroup, [{
    key: "getCards",
    value: function getCards() {
      return this.cards;
    }
  }, {
    key: "getCard",
    value: function getCard(i) {
      return this.cards[i];
    }
  }, {
    key: "setCards",
    value: function setCards(cards) {
      this.cards = cards;
    }
  }, {
    key: "length",
    value: function length() {
      return this.cards.length;
    }
  }, {
    key: "push",
    value: function push(v) {
      this.cards.push(v);
    }
  }, {
    key: "containsCard",
    value: function containsCard(c) {
      return this.cards.reduce(function (acc, card) {
        return card.equals(c) || acc;
      }, false);
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.cards.join(" ");
    }
  }, {
    key: "sortCards",
    value: function sortCards(type) {
      var sorted = _lodash2.default.orderBy(this.cards, ["rank", "suit"], [type, type]);
      this.cards.splice.apply(this.cards, [0, this.cards.length].concat(sorted));
    }
  }, {
    key: "concat",
    value: function concat(cardgroup) {
      return new CardGroup(this.cards.concat(cardgroup.getCards()));
    }
  }, {
    key: "countBy",
    value: function countBy(type) {
      return _lodash2.default.countBy(this.cards, type);
    }
  }], [{
    key: "fromString",
    value: function fromString(s) {
      var tmp = s.replace(/[^a-z0-9]/gi, "");
      if (tmp.length % 2 !== 0) {
        throw new Error("Invalid cards: " + s);
      }

      var cards = [];
      for (var i = 0; i < tmp.length; i += 2) {
        cards.push(_Card2.default.fromString(tmp.substring(i, i + 2)));
      }
      return new CardGroup(cards);
    }
  }]);

  return CardGroup;
}();

exports.default = CardGroup;