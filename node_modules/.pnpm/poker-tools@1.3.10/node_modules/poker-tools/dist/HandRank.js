"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

var _Rank = require("./Rank");

var _Rank2 = _interopRequireDefault(_Rank);

var _CardGroup = require("./CardGroup");

var _CardGroup2 = _interopRequireDefault(_CardGroup);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var HandRank = function () {
  function HandRank(rank, highcards) {
    _classCallCheck(this, HandRank);

    this.rank = rank;
    this.highcards = highcards;
  }

  _createClass(HandRank, [{
    key: "getHighCards",
    value: function getHighCards() {
      return this.highcards;
    }
  }, {
    key: "getRank",
    value: function getRank() {
      return this.rank;
    }
  }, {
    key: "compareTo",
    value: function compareTo(handrank) {
      if (this.getRank() === handrank.getRank()) {
        for (var i = 0; i < Math.min(5, this.highcards.getCards().length, handrank.getHighCards().getCards().length); i++) {
          if (this.getHighCards().getCard(i).getRank() !== handrank.getHighCards().getCard(i).getRank()) {
            return this.getHighCards().getCard(i).getRank() > handrank.getHighCards().getCard(i).getRank() ? 1 : -1;
          }
        }
        return 0;
      }
      return this.getRank() > handrank.getRank() ? 1 : -1;
    }
  }, {
    key: "toString",
    value: function toString() {
      if (!this.highcards.getCard(0)) {
        return "No cards";
      }
      var showHighcards = 0;
      var s = "";
      switch (this.rank) {
        case HandRank.STRAIGHT_FLUSH:
          if (this.highcards.getCard(0).getRank() === _Rank2.default.ACE) {
            s = "Royal flush";
          } else {
            s = "Straight flush";
          }
          break;
        case HandRank.QUADS:
          s = "Quads";
          showHighcards = 1;
          break;
        case HandRank.FULL_HOUSE:
          s = "Full house";
          break;
        case HandRank.FLUSH:
          s = "Flush (" + this.highcards.getCard(0).toString(false, false, true) + " high)";
          break;
        case HandRank.STRAIGHT:
          s = "Straight (" + this.highcards.getCard(0).toString(false, false, true) + " high)";
          break;
        case HandRank.TRIPS:
          s = "Trips (" + this.highcards.getCard(0).toString(false, false, true) + this.highcards.getCard(0).toString(false, false, true) + this.highcards.getCard(0).toString(false, false, true) + ")";
          break;
        case HandRank.TWO_PAIRS:
          s = "Two pair";
          break;
        case HandRank.PAIR:
          s = "Pair (" + this.highcards.getCard(0).toString(false, false, true) + this.highcards.getCard(0).toString(false, false, true) + ")";
          break;
        default:
          s = this.highcards.getCard(0).toString(false, true, false) + " high";
          break;
      }
      return s;
    }
  }], [{
    key: "evaluate",
    value: function evaluate(cardgroup) {
      cardgroup.sortCards("desc");
      // Group card by ranks
      var countByRanks = cardgroup.countBy("rank");
      var quadRanks = [];
      var tripRanks = [];
      var pairRanks = [];
      var straightCardsCount = 0;
      var straightMaxCardRank = 0;
      var straightLastCardRank = 0;
      var allRanks = Object.keys(countByRanks).reverse();
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = allRanks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var rank = _step.value;

          if (countByRanks[rank] === 2) {
            pairRanks.push(Number(rank));
          } else if (countByRanks[rank] === 3) {
            tripRanks.push(Number(rank));
          } else if (countByRanks[rank] === 4) {
            quadRanks.push(Number(rank));
          }
          if (straightCardsCount !== 5) {
            if (straightLastCardRank === 0 || straightLastCardRank - 1 !== Number(rank)) {
              straightMaxCardRank = straightLastCardRank = Number(rank);
              straightCardsCount = 1;
            } else {
              straightCardsCount += 1;
              straightLastCardRank = Number(rank);
            }
          }
        }
        // Group card by suit
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      var countBySuits = cardgroup.countBy("suit");
      var flushSuit = 0;
      for (var suit in countBySuits) {
        if (countBySuits[suit] >= 5) {
          flushSuit = Number(suit);
          break;
        }
      }
      // Straight flush
      if (flushSuit > 0) {
        if (straightCardsCount >= 5) {
          var straightFlushCards = _lodash2.default.filter(cardgroup.getCards(), function (card) {
            return card.getSuit() === flushSuit && card.getRank() <= straightMaxCardRank;
          });
          if (straightFlushCards.length >= 5) {
            var isStraightFlush = true;
            for (var i = 1; i <= 4; i++) {
              if (straightFlushCards[i].getRank() != straightFlushCards[i - 1].getRank() - 1) {
                isStraightFlush = false;
                break;
              }
            }
            if (isStraightFlush) {
              return new HandRank(HandRank.STRAIGHT_FLUSH, new _CardGroup2.default(straightFlushCards.slice(0, 5)));
            }
          } else if (straightFlushCards.length === 4 && straightFlushCards[0].getRank() === _Rank2.default.FIVE) {
            var aceCards = _lodash2.default.filter(cardgroup.getCards(), function (card) {
              return card.getSuit() === flushSuit && card.getRank() === _Rank2.default.ACE;
            });
            if (aceCards.length) {
              return new HandRank(HandRank.STRAIGHT_FLUSH, new _CardGroup2.default(straightFlushCards.concat(aceCards[0])));
            }
          }
        } else if (straightCardsCount === 4 && straightMaxCardRank === _Rank2.default.FIVE) {
          // Five high straight flush (5-4-3-2-A)
          var _aceCards = _lodash2.default.filter(cardgroup.getCards(), function (card) {
            return card.getSuit() === flushSuit && card.getRank() === _Rank2.default.ACE;
          });
          if (_aceCards.length > 0) {
            var _straightFlushCards = _lodash2.default.filter(cardgroup.getCards(), function (card) {
              return card.getSuit() === flushSuit && card.getRank() <= straightMaxCardRank;
            });
            if (_straightFlushCards.length === 4) {
              return new HandRank(HandRank.STRAIGHT_FLUSH, new _CardGroup2.default(_straightFlushCards.concat(_aceCards[0]).slice(0, 5)));
            }
          }
        }
      }
      // Quads
      if (quadRanks.length == 1) {
        var quadCards = _lodash2.default.filter(cardgroup.getCards(), { rank: quadRanks[0] });
        var cards = _lodash2.default.reject(cardgroup.getCards(), { rank: quadRanks[0] });
        return new HandRank(HandRank.QUADS, new _CardGroup2.default(quadCards.concat(cards).slice(0, 5)));
      }
      // Full house
      if (tripRanks.length == 1 && pairRanks.length >= 1) {
        var tripCards = _lodash2.default.filter(cardgroup.getCards(), { rank: tripRanks[0] });
        var pairCards = _lodash2.default.filter(cardgroup.getCards(), { rank: pairRanks[0] });
        return new HandRank(HandRank.FULL_HOUSE, new _CardGroup2.default(tripCards.concat(pairCards)));
      } else if (tripRanks.length > 1) {
        var _tripCards = _lodash2.default.filter(cardgroup.getCards(), { rank: tripRanks[0] });
        var _pairCards = _lodash2.default.filter(cardgroup.getCards(), { rank: tripRanks[1] });
        return new HandRank(HandRank.FULL_HOUSE, new _CardGroup2.default(_tripCards.concat(_pairCards.slice(0, 2))));
      }
      // Flush
      if (flushSuit > 0) {
        var flushCards = _lodash2.default.filter(cardgroup.getCards(), { suit: flushSuit });
        return new HandRank(HandRank.FLUSH, new _CardGroup2.default(flushCards.slice(0, 5)));
      }
      // Straight
      if (straightCardsCount === 5) {
        var straightCards = _lodash2.default.uniqWith(_lodash2.default.filter(cardgroup.getCards(), function (card) {
          return card.getRank() <= straightMaxCardRank;
        }), function (c1, c2) {
          return c1.getRank() === c2.getRank();
        });
        return new HandRank(HandRank.STRAIGHT, new _CardGroup2.default(straightCards.slice(0, 5)));
      } else if (straightCardsCount === 4 && straightMaxCardRank === _Rank2.default.FIVE) {
        // Five high straight (5-4-3-2-A)
        var _aceCards2 = _lodash2.default.filter(cardgroup.getCards(), function (card) {
          return card.getRank() === _Rank2.default.ACE;
        });
        if (_aceCards2.length > 0) {
          var _straightCards = _lodash2.default.uniqWith(_lodash2.default.filter(cardgroup.getCards(), function (card) {
            return card.getRank() <= straightMaxCardRank;
          }), function (c1, c2) {
            return c1.getRank() === c2.getRank();
          });
          return new HandRank(HandRank.STRAIGHT, new _CardGroup2.default(_straightCards.concat(_aceCards2[0]).slice(0, 5)));
        }
      }
      // Trips
      if (tripRanks.length == 1) {
        var _tripCards2 = _lodash2.default.filter(cardgroup.getCards(), { rank: tripRanks[0] });
        var _cards = _lodash2.default.reject(cardgroup.getCards(), { rank: tripRanks[0] });
        return new HandRank(HandRank.TRIPS, new _CardGroup2.default(_tripCards2.concat(_cards).slice(0, 5)));
      }
      // Two pairs
      if (pairRanks.length >= 2) {
        var pairedHigherCards = _lodash2.default.filter(cardgroup.getCards(), { rank: pairRanks[0] });
        var pairedLowerCards = _lodash2.default.filter(cardgroup.getCards(), { rank: pairRanks[1] });
        var unpairedCards = _lodash2.default.reject(_lodash2.default.reject(cardgroup.getCards(), { rank: pairRanks[0] }), { rank: pairRanks[1] });
        return new HandRank(HandRank.TWO_PAIRS, new _CardGroup2.default(pairedHigherCards.concat(pairedLowerCards).concat(unpairedCards).slice(0, 5)));
      }
      // One pair
      if (pairRanks.length == 1) {
        var pairedCards = _lodash2.default.filter(cardgroup.getCards(), { rank: pairRanks[0] });
        var _unpairedCards = _lodash2.default.reject(cardgroup.getCards(), { rank: pairRanks[0] });
        return new HandRank(HandRank.PAIR, new _CardGroup2.default(pairedCards.concat(_unpairedCards).slice(0, 5)));
      }
      // High card
      return new HandRank(HandRank.HIGH_CARD, new _CardGroup2.default(cardgroup.getCards().slice(0, 5)));
    }
  }]);

  return HandRank;
}();

exports.default = HandRank;


HandRank.HIGH_CARD = 1;
HandRank.PAIR = 2;
HandRank.TWO_PAIRS = 3;
HandRank.TRIPS = 4;
HandRank.STRAIGHT = 5;
HandRank.FLUSH = 6;
HandRank.FULL_HOUSE = 7;
HandRank.QUADS = 8;
HandRank.STRAIGHT_FLUSH = 9;